name: Build & Deploy to EC2

on:
  push:
    branches: [ "main" ]  # main 브랜치에 푸시될 때만 동작

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # (1) 소스코드 체크아웃
      - name: Check out repository
        uses: actions/checkout@v3

      # (2) application.yml 생성
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APP_YML }}" > src/main/resources/application.yml

      # (3) JDK 설정
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # (4) Gradle 빌드 (테스트는 필요시 수행)
      - name: Build (Gradle)
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
          ls -alh build/libs

      # (5) AWS 자격증명 세팅
      #     - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION 은 GitHub Secrets에 저장해둡니다.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # (6) 빌드 산출물 (JAR) S3 업로드
      #     - BUCKET_NAME도 GitHub Secrets나 환경 변수로 관리하는 것이 안전합니다.
      - name: Upload jar to S3
        run: |
          aws s3 cp \
            build/libs/saver-0.0.1-SNAPSHOT.jar \
            s3://${{ secrets.BUCKET_NAME }}/saver-0.0.1-SNAPSHOT.jar

      # (7) SSH Agent 설정 (비공개 키 등록)
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # (8) EC2에서 기존 프로세스 종료 & 새로 실행
      - name: Restart App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 1) 기존 프로세스 종료 (app.jar)
            if pgrep -f app.jar > /dev/null
            then
              echo "Kill existing process..."
              pgrep -f app.jar | xargs kill -9
              sleep 2
            fi

            # 2) S3에서 최신 JAR 다운로드
            echo "Download jar from S3..."
            aws s3 cp s3://${{ secrets.BUCKET_NAME }}/saver-0.0.1-SNAPSHOT.jar /home/${{ secrets.EC2_USER }}/app.jar

            # 3) 새로 실행
            echo "Start new Spring Boot jar..."
            nohup java -jar /home/${{ secrets.EC2_USER }}/app.jar --server.port=8080 > /home/${{ secrets.EC2_USER }}/app.log 2>&1 &

            exit
          EOF
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
